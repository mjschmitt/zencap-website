// src/components/spa/SpaOptimizedExcelViewer.js - High-Performance Excel Viewer for SPA
import { useState, useEffect, useRef, Suspense, lazy } from 'react';\nimport { useSpa } from './SpaRouter';\nimport { useComponentLoader } from './LazyLoadManager';\nimport { OptimizedMotionDiv } from './OptimizedMotion';\n\n// Lazy load the heavy Excel components\nconst ExcelJSViewer = lazy(() => \n  import('../ui/ExcelViewer/ExcelJSViewer').then(module => ({\n    default: module.default\n  })).catch(err => {\n    console.error('Failed to load ExcelJSViewer:', err);\n    // Return fallback component\n    return {\n      default: ({ file, onDataChange }) => (\n        <div className=\"p-8 bg-gray-100 rounded-lg border-2 border-dashed border-gray-300\">\n          <div className=\"text-center\">\n            <svg className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n            <h3 className=\"text-lg font-medium text-gray-700 mb-2\">Excel Viewer Unavailable</h3>\n            <p className=\"text-gray-500 text-sm mb-4\">The Excel viewer is temporarily unavailable. Please try refreshing the page.</p>\n            <button \n              onClick={() => window.location.reload()}\n              className=\"bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\"\n            >\n              Refresh Page\n            </button>\n          </div>\n        </div>\n      )\n    };\n  })\n);\n\n// Advanced loading states for better UX\nconst ExcelLoadingStates = {\n  idle: {\n    component: () => (\n      <div className=\"h-64 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <svg className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <p className=\"text-gray-500 text-sm\">Click to load Excel viewer</p>\n        </div>\n      </div>\n    ),\n    message: 'Ready to load Excel viewer'\n  },\n  \n  loading: {\n    component: () => (\n      <div className=\"h-64 bg-gray-50 rounded-lg border flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 mb-4 bg-teal-100 rounded-lg\">\n            <svg className=\"w-6 h-6 text-teal-600 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          </div>\n          <p className=\"text-gray-600 font-medium mb-1\">Loading Excel Viewer</p>\n          <p className=\"text-gray-500 text-sm\">Preparing spreadsheet interface...</p>\n        </div>\n      </div>\n    ),\n    message: 'Loading Excel viewer components'\n  },\n  \n  processing: {\n    component: ({ fileName }) => (\n      <div className=\"h-64 bg-gray-50 rounded-lg border flex items-center justify-center\">\n        <div className=\"text-center max-w-sm\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 mb-4 bg-blue-100 rounded-lg\">\n            <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n          </div>\n          <p className=\"text-gray-600 font-medium mb-1\">Processing Spreadsheet</p>\n          <p className=\"text-gray-500 text-sm mb-2\">\n            {fileName ? `Processing ${fileName}...` : 'Analyzing Excel file structure...'}\n          </p>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div className=\"bg-blue-600 h-2 rounded-full animate-pulse\" style={{width: '60%'}}></div>\n          </div>\n        </div>\n      </div>\n    ),\n    message: 'Processing Excel file'\n  },\n  \n  error: {\n    component: ({ error, onRetry }) => (\n      <div className=\"h-64 bg-red-50 rounded-lg border-2 border-red-200 flex items-center justify-center\">\n        <div className=\"text-center max-w-sm\">\n          <svg className=\"w-12 h-12 mx-auto text-red-500 mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n          <h3 className=\"text-lg font-medium text-red-700 mb-2\">Excel Viewer Error</h3>\n          <p className=\"text-red-600 text-sm mb-4\">\n            {error || 'Failed to load Excel viewer. Please try again.'}\n          </p>\n          <button \n            onClick={onRetry}\n            className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    ),\n    message: 'Error loading Excel viewer'\n  }\n};\n\nexport default function SpaOptimizedExcelViewer({ \n  file, \n  title,\n  onDataChange,\n  className = '',\n  autoLoad = false,\n  priority = 'high',\n  ...props \n}) {\n  const { isSpaMode } = useSpa();\n  const { triggerLoad, isLoading, isLoaded } = useComponentLoader('ExcelViewer', 'CRITICAL');\n  const [viewerState, setViewerState] = useState(autoLoad ? 'loading' : 'idle');\n  const [error, setError] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const viewerRef = useRef(null);\n  const hasTriggeredLoad = useRef(false);\n\n  // Extract filename from file prop\n  useEffect(() => {\n    if (file) {\n      const name = typeof file === 'string' \n        ? file.split('/').pop() \n        : file.name || 'spreadsheet.xlsx';\n      setFileName(name);\n    }\n  }, [file]);\n\n  // Auto-trigger loading for high priority or when file is provided\n  useEffect(() => {\n    if ((autoLoad || file) && !hasTriggeredLoad.current) {\n      handleLoadViewer();\n      hasTriggeredLoad.current = true;\n    }\n  }, [autoLoad, file]);\n\n  // Intersection observer for lazy loading when in viewport\n  useEffect(() => {\n    if (!viewerRef.current || viewerState !== 'idle') return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !hasTriggeredLoad.current) {\n          handleLoadViewer();\n          hasTriggeredLoad.current = true;\n          observer.disconnect();\n        }\n      },\n      {\n        rootMargin: '100px', // Load 100px before entering viewport\n        threshold: 0.1\n      }\n    );\n\n    observer.observe(viewerRef.current);\n\n    return () => observer.disconnect();\n  }, [viewerState]);\n\n  const handleLoadViewer = async () => {\n    try {\n      setViewerState('loading');\n      setError(null);\n      \n      // Trigger component loading\n      await triggerLoad();\n      \n      // If file is provided, switch to processing state\n      if (file) {\n        setViewerState('processing');\n        \n        // Simulate file processing time (remove in production)\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      \n      setViewerState('loaded');\n    } catch (err) {\n      console.error('Failed to load Excel viewer:', err);\n      setError(err.message || 'Failed to load Excel viewer');\n      setViewerState('error');\n    }\n  };\n\n  const handleRetry = () => {\n    hasTriggeredLoad.current = false;\n    setError(null);\n    handleLoadViewer();\n  };\n\n  const handleManualLoad = () => {\n    if (viewerState === 'idle') {\n      handleLoadViewer();\n    }\n  };\n\n  // Render appropriate state component\n  const renderStateComponent = () => {\n    const StateComponent = ExcelLoadingStates[viewerState]?.component;\n    \n    if (!StateComponent) {\n      return ExcelLoadingStates.idle.component();\n    }\n\n    const props = {\n      fileName,\n      error,\n      onRetry: handleRetry\n    };\n\n    return <StateComponent {...props} />;\n  };\n\n  // Main render logic\n  const content = (() => {\n    if (viewerState === 'loaded' && isLoaded) {\n      return (\n        <Suspense fallback={ExcelLoadingStates.loading.component()}>\n          <ExcelJSViewer \n            file={file}\n            title={title}\n            onDataChange={onDataChange}\n            optimized={isSpaMode}\n            {...props}\n          />\n        </Suspense>\n      );\n    }\n\n    return (\n      <div \n        className={`cursor-pointer transition-all duration-200 hover:bg-gray-50 rounded-lg ${\n          viewerState === 'idle' ? 'hover:border-teal-300' : ''\n        }`}\n        onClick={handleManualLoad}\n      >\n        {renderStateComponent()}\n      </div>\n    );\n  })();\n\n  return (\n    <div \n      ref={viewerRef} \n      className={`spa-excel-viewer ${className}`}\n      data-component=\"SpaOptimizedExcelViewer\"\n      data-state={viewerState}\n      data-spa-mode={isSpaMode}\n    >\n      {isSpaMode ? (\n        <OptimizedMotionDiv animation=\"fadeIn\" className=\"h-full\">\n          {content}\n        </OptimizedMotionDiv>\n      ) : (\n        content\n      )}\n      \n      {/* Performance monitoring in development */}\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"text-xs text-gray-400 mt-2\">\n          State: {viewerState} | SPA: {isSpaMode ? 'ON' : 'OFF'} | Loaded: {isLoaded ? 'YES' : 'NO'}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Hook for external Excel viewer control\nexport function useExcelViewerControl(viewerRef) {\n  const [isViewerReady, setIsViewerReady] = useState(false);\n  const [viewerData, setViewerData] = useState(null);\n\n  const loadFile = async (file) => {\n    if (viewerRef.current?.loadFile) {\n      try {\n        const result = await viewerRef.current.loadFile(file);\n        setViewerData(result);\n        return result;\n      } catch (error) {\n        console.error('Failed to load file:', error);\n        throw error;\n      }\n    }\n  };\n\n  const exportFile = async (format = 'xlsx') => {\n    if (viewerRef.current?.exportFile) {\n      return await viewerRef.current.exportFile(format);\n    }\n  };\n\n  const refreshViewer = () => {\n    if (viewerRef.current?.refresh) {\n      viewerRef.current.refresh();\n    }\n  };\n\n  return {\n    isViewerReady,\n    viewerData,\n    loadFile,\n    exportFile,\n    refreshViewer\n  };\n}\n\n// Pre-configured Excel viewer variants\nexport const QuickExcelViewer = (props) => (\n  <SpaOptimizedExcelViewer \n    autoLoad={true}\n    priority=\"high\"\n    className=\"h-96\"\n    {...props}\n  />\n);\n\nexport const LazyExcelViewer = (props) => (\n  <SpaOptimizedExcelViewer \n    autoLoad={false}\n    priority=\"medium\"\n    className=\"min-h-64\"\n    {...props}\n  />\n);
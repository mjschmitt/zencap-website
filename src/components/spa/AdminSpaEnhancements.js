// src/components/spa/AdminSpaEnhancements.js - Admin Dashboard SPA Optimizations\nimport { useState, useEffect, useRef, lazy, Suspense } from 'react';\nimport { useSpa } from './SpaRouter';\nimport { useComponentLoader, LazyComponents } from './LazyLoadManager';\nimport { OptimizedMotionDiv } from './OptimizedMotion';\n\n// Lazy-loaded admin components with intelligent fallbacks\nconst LazyAdminComponents = {\n  RichTextEditor: lazy(() => \n    import('../ui/RichTextEditor').catch(() => ({\n      default: ({ value, onChange, placeholder }) => (\n        <div className=\"min-h-32 p-4 border border-gray-300 rounded-lg bg-gray-50\">\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center\">\n              <svg className=\"w-8 h-8 mx-auto text-gray-400 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n              </svg>\n              <p className=\"text-gray-500 text-sm\">Rich text editor unavailable</p>\n              <textarea\n                value={value || ''}\n                onChange={(e) => onChange && onChange(e.target.value)}\n                placeholder={placeholder || 'Enter content...'}\n                className=\"mt-2 w-full h-24 p-2 border border-gray-300 rounded resize-none text-sm\"\n              />\n            </div>\n          </div>\n        </div>\n      )\n    }))\n  ),\n\n  DashboardCharts: lazy(() => \n    import('../admin/DashboardCharts').catch(() => ({\n      default: ({ data = [] }) => (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-4\"></div>\n                <div className=\"h-32 bg-gray-100 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )\n    }))\n  ),\n\n  ExcelPreview: lazy(() => \n    import('../ui/ExcelPreview').catch(() => ({\n      default: ({ file, title }) => (\n        <div className=\"p-8 bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg\">\n          <div className=\"text-center\">\n            <svg className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n            <p className=\"text-gray-600 font-medium mb-2\">{title || 'Excel Preview'}</p>\n            <p className=\"text-gray-500 text-sm\">Preview temporarily unavailable</p>\n            {file && (\n              <p className=\"text-gray-400 text-xs mt-1\">\n                File: {typeof file === 'string' ? file.split('/').pop() : file.name}\n              </p>\n            )}\n          </div>\n        </div>\n      )\n    }))\n  ),\n\n  AnalyticsCharts: lazy(() => \n    Promise.resolve({\n      default: ({ type = 'mixed', data = [] }) => {\n        const mockData = data.length > 0 ? data : [\n          { name: 'Models', value: 400 },\n          { name: 'Insights', value: 300 },\n          { name: 'Contacts', value: 200 },\n          { name: 'Subscriptions', value: 100 }\n        ];\n\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n              Analytics Overview\n            </h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              {mockData.map((item, index) => (\n                <div key={index} className=\"bg-gray-50 p-4 rounded\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {item.name}\n                    </span>\n                    <span className=\"text-lg font-bold text-teal-600\">\n                      {item.value}\n                    </span>\n                  </div>\n                  <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-teal-600 h-2 rounded-full\" \n                      style={{ width: `${(item.value / 400) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      }\n    })\n  )\n};\n\n// Enhanced loading skeletons for admin components\nconst AdminLoadingSkeletons = {\n  richTextEditor: (\n    <div className=\"bg-white border border-gray-300 rounded-lg overflow-hidden\">\n      <div className=\"border-b border-gray-200 px-3 py-2 bg-gray-50\">\n        <div className=\"flex space-x-2\">\n          {[...Array(8)].map((_, i) => (\n            <div key={i} className=\"h-8 w-8 bg-gray-200 rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n      <div className=\"p-4 h-48\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-5/6 mb-3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n        </div>\n      </div>\n    </div>\n  ),\n\n  dashboardCharts: (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      {[...Array(4)].map((_, i) => (\n        <div key={i} className=\"bg-white rounded-lg shadow p-6 animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"h-32 bg-gray-100 rounded mb-4\"></div>\n          <div className=\"flex justify-between\">\n            <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n          </div>\n        </div>\n      ))}\n    </div>\n  ),\n\n  excelPreview: (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-6 animate-pulse\">\n      <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n      <div className=\"grid grid-cols-6 gap-2 mb-4\">\n        {[...Array(18)].map((_, i) => (\n          <div key={i} className=\"h-8 bg-gray-100 rounded\"></div>\n        ))}\n      </div>\n      <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n    </div>\n  ),\n\n  analyticsCharts: (\n    <div className=\"bg-white rounded-lg shadow p-6 animate-pulse\">\n      <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-6\"></div>\n      <div className=\"grid grid-cols-2 gap-4\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"bg-gray-50 p-4 rounded\">\n            <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n            <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-3\"></div>\n            <div className=\"h-2 bg-gray-200 rounded w-full\"></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n};\n\n// SPA-optimized component loader with intelligent preloading\nexport function useSpaAdminComponent(componentName, preload = false) {\n  const { isSpaMode } = useSpa();\n  const { triggerLoad, isLoaded, isLoading } = useComponentLoader(componentName, 'HIGH');\n  const [componentState, setComponentState] = useState('idle');\n  const componentRef = useRef(null);\n\n  useEffect(() => {\n    if (preload && isSpaMode) {\n      handleLoadComponent();\n    }\n  }, [preload, isSpaMode]);\n\n  const handleLoadComponent = async () => {\n    if (componentState !== 'idle' && componentState !== 'error') return;\n    \n    try {\n      setComponentState('loading');\n      await triggerLoad();\n      setComponentState('loaded');\n    } catch (error) {\n      console.error(`Failed to load admin component ${componentName}:`, error);\n      setComponentState('error');\n    }\n  };\n\n  return {\n    isLoaded: componentState === 'loaded' && isLoaded,\n    isLoading: componentState === 'loading' || isLoading,\n    hasError: componentState === 'error',\n    loadComponent: handleLoadComponent,\n    componentRef\n  };\n}\n\n// Enhanced admin component wrapper\nexport function SpaAdminComponent({ \n  type, \n  children, \n  preload = false, \n  className = '',\n  fallback = null,\n  ...props \n}) {\n  const { isSpaMode } = useSpa();\n  const { isLoaded, isLoading, hasError, loadComponent } = useSpaAdminComponent(type, preload);\n\n  const LazyComponent = LazyAdminComponents[type];\n  const loadingSkeleton = AdminLoadingSkeletons[type] || (\n    <div className=\"h-32 bg-gray-100 rounded-lg animate-pulse flex items-center justify-center\">\n      <div className=\"text-gray-500\">Loading {type}...</div>\n    </div>\n  );\n\n  if (!isSpaMode) {\n    // Fallback to regular component loading for non-SPA mode\n    return children || <div className={className}>Regular component loading...</div>;\n  }\n\n  if (hasError) {\n    return (\n      <div className={`bg-red-50 border border-red-200 rounded-lg p-4 ${className}`}>\n        <div className=\"text-center\">\n          <svg className=\"w-8 h-8 mx-auto text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n          <p className=\"text-red-700 font-medium mb-2\">Component Error</p>\n          <p className=\"text-red-600 text-sm mb-3\">Failed to load {type} component</p>\n          <button \n            onClick={loadComponent}\n            className=\"bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm font-medium transition-colors\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <OptimizedMotionDiv animation=\"fadeIn\" className={className}>\n        <div \n          className=\"cursor-pointer transition-all duration-200 hover:bg-gray-50 rounded-lg\"\n          onClick={loadComponent}\n        >\n          {isLoading ? loadingSkeleton : (\n            <div className=\"p-6 border-2 border-dashed border-gray-300 rounded-lg text-center hover:border-teal-300\">\n              <svg className=\"w-8 h-8 mx-auto text-gray-400 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122\" />\n              </svg>\n              <p className=\"text-gray-600 font-medium\">Load {type}</p>\n              <p className=\"text-gray-500 text-sm\">Click to load component</p>\n            </div>\n          )}\n        </div>\n      </OptimizedMotionDiv>\n    );\n  }\n\n  return (\n    <OptimizedMotionDiv animation=\"fadeIn\" className={className}>\n      <Suspense fallback={loadingSkeleton}>\n        <LazyComponent {...props}>\n          {children}\n        </LazyComponent>\n      </Suspense>\n    </OptimizedMotionDiv>\n  );\n}\n\n// Pre-configured admin components\nexport const SpaRichTextEditor = (props) => (\n  <SpaAdminComponent type=\"RichTextEditor\" preload={true} {...props} />\n);\n\nexport const SpaDashboardCharts = (props) => (\n  <SpaAdminComponent type=\"DashboardCharts\" preload={false} {...props} />\n);\n\nexport const SpaExcelPreview = (props) => (\n  <SpaAdminComponent type=\"ExcelPreview\" preload={false} {...props} />\n);\n\nexport const SpaAnalyticsCharts = (props) => (\n  <SpaAdminComponent type=\"AnalyticsCharts\" preload={false} {...props} />\n);\n\n// Admin dashboard performance monitor\nexport function useAdminPerformance() {\n  const [metrics, setMetrics] = useState({\n    componentLoadTime: {},\n    renderCount: 0,\n    memoryUsage: 0,\n    lastUpdate: Date.now()\n  });\n\n  const recordComponentLoad = (componentName, loadTime) => {\n    setMetrics(prev => ({\n      ...prev,\n      componentLoadTime: {\n        ...prev.componentLoadTime,\n        [componentName]: loadTime\n      },\n      lastUpdate: Date.now()\n    }));\n  };\n\n  const recordRender = () => {\n    setMetrics(prev => ({\n      ...prev,\n      renderCount: prev.renderCount + 1,\n      lastUpdate: Date.now()\n    }));\n  };\n\n  useEffect(() => {\n    // Memory usage monitoring\n    const interval = setInterval(() => {\n      if (performance.memory) {\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: performance.memory.usedJSHeapSize / 1048576 // MB\n        }));\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    metrics,\n    recordComponentLoad,\n    recordRender\n  };\n}
// src/components/spa/SpaFeatureFlags.js - Feature Flag System for Progressive SPA Rollout\nimport { createContext, useContext, useState, useEffect } from 'react';\n\nconst FeatureFlagContext = createContext({\n  flags: {},\n  isEnabled: () => false,\n  setFlag: () => {},\n  userId: null,\n  segment: 'default'\n});\n\nexport const useFeatureFlags = () => useContext(FeatureFlagContext);\n\n// Default feature flag configuration\nconst DEFAULT_FLAGS = {\n  // SPA Features\n  spa_hybrid_routing: {\n    enabled: true,\n    rollout: 100, // Percentage of users\n    segments: ['all'],\n    description: 'Enable hybrid SPA routing system'\n  },\n  \n  spa_optimized_models: {\n    enabled: true,\n    rollout: 80,\n    segments: ['beta', 'power_users'],\n    description: 'Use optimized model cards in SPA mode'\n  },\n  \n  spa_excel_viewer: {\n    enabled: false,\n    rollout: 30,\n    segments: ['beta'],\n    description: 'SPA-optimized Excel viewer with lazy loading'\n  },\n  \n  spa_admin_dashboard: {\n    enabled: false,\n    rollout: 50,\n    segments: ['admin', 'beta'],\n    description: 'Enhanced admin dashboard with SPA optimizations'\n  },\n  \n  // Performance Features\n  optimized_motion: {\n    enabled: true,\n    rollout: 100,\n    segments: ['all'],\n    description: 'Device-adaptive motion system'\n  },\n  \n  lazy_load_manager: {\n    enabled: true,\n    rollout: 90,\n    segments: ['all'],\n    description: 'Intelligent component lazy loading'\n  },\n  \n  bundle_optimization: {\n    enabled: true,\n    rollout: 70,\n    segments: ['all'],\n    description: 'Advanced bundle splitting and optimization'\n  },\n  \n  // Monitoring\n  performance_monitoring: {\n    enabled: true,\n    rollout: 100,\n    segments: ['all'],\n    description: 'Real-time performance monitoring'\n  },\n  \n  error_tracking: {\n    enabled: true,\n    rollout: 100,\n    segments: ['all'],\n    description: 'Enhanced error tracking and reporting'\n  }\n};\n\n// User segmentation logic\nconst getUserSegment = (userId) => {\n  if (!userId) return 'anonymous';\n  \n  // Simple hash-based segmentation\n  const hash = userId.split('').reduce((acc, char) => {\n    return acc + char.charCodeAt(0);\n  }, 0);\n  \n  const segments = ['default', 'beta', 'power_users'];\n  const segmentIndex = hash % segments.length;\n  \n  return segments[segmentIndex];\n};\n\n// Rollout percentage check\nconst isInRollout = (userId, percentage) => {\n  if (percentage >= 100) return true;\n  if (percentage <= 0) return false;\n  \n  const hash = (userId || 'anonymous').split('').reduce((acc, char) => {\n    return acc + char.charCodeAt(0);\n  }, 0);\n  \n  return (hash % 100) < percentage;\n};\n\nexport default function SpaFeatureFlags({ children, userId = null, customFlags = {} }) {\n  const [flags, setFlags] = useState({ ...DEFAULT_FLAGS, ...customFlags });\n  const [userSegment, setUserSegment] = useState('default');\n  const [performanceGate, setPerformanceGate] = useState(true);\n\n  // Initialize user segment\n  useEffect(() => {\n    const segment = getUserSegment(userId);\n    setUserSegment(segment);\n  }, [userId]);\n\n  // Performance-based feature gating\n  useEffect(() => {\n    const checkPerformance = () => {\n      if (typeof window === 'undefined') return;\n      \n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n      const memory = navigator.deviceMemory || 4;\n      const hardwareConcurrency = navigator.hardwareConcurrency || 2;\n      \n      // Performance thresholds\n      const isLowEnd = memory < 2 || hardwareConcurrency < 4;\n      const isSlowConnection = connection && ['slow-2g', '2g', '3g'].includes(connection.effectiveType);\n      \n      if (isLowEnd || isSlowConnection) {\n        setPerformanceGate(false);\n        // Disable performance-intensive features\n        setFlags(prev => ({\n          ...prev,\n          spa_excel_viewer: { ...prev.spa_excel_viewer, enabled: false },\n          optimized_motion: { ...prev.optimized_motion, enabled: false }\n        }));\n      }\n    };\n    \n    checkPerformance();\n  }, []);\n\n  // Feature flag evaluation\n  const isEnabled = (flagName, overrides = {}) => {\n    const flag = flags[flagName];\n    if (!flag) return false;\n    \n    // Check if explicitly overridden\n    if (overrides[flagName] !== undefined) {\n      return overrides[flagName];\n    }\n    \n    // Check if flag is enabled\n    if (!flag.enabled) return false;\n    \n    // Check segment eligibility\n    if (flag.segments && flag.segments.length > 0) {\n      if (!flag.segments.includes('all') && !flag.segments.includes(userSegment)) {\n        return false;\n      }\n    }\n    \n    // Check rollout percentage\n    if (!isInRollout(userId, flag.rollout)) {\n      return false;\n    }\n    \n    // Performance gate check\n    if (!performanceGate && ['spa_excel_viewer', 'optimized_motion'].includes(flagName)) {\n      return false;\n    }\n    \n    return true;\n  };\n\n  // Update flag configuration\n  const setFlag = (flagName, config) => {\n    setFlags(prev => ({\n      ...prev,\n      [flagName]: {\n        ...prev[flagName],\n        ...config\n      }\n    }));\n  };\n\n  // Bulk flag updates\n  const updateFlags = (newFlags) => {\n    setFlags(prev => ({ ...prev, ...newFlags }));\n  };\n\n  // Emergency rollback\n  const emergencyRollback = () => {\n    setFlags(prev => {\n      const rolledBack = {};\n      Object.keys(prev).forEach(key => {\n        rolledBack[key] = { ...prev[key], enabled: false };\n      });\n      \n      // Keep essential features enabled\n      rolledBack.performance_monitoring = { ...rolledBack.performance_monitoring, enabled: true };\n      rolledBack.error_tracking = { ...rolledBack.error_tracking, enabled: true };\n      \n      return rolledBack;\n    });\n  };\n\n  // Feature flag analytics\n  const logFeatureUsage = (flagName, action = 'used') => {\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'feature_flag_usage', {\n        feature_name: flagName,\n        action: action,\n        user_segment: userSegment,\n        user_id: userId || 'anonymous'\n      });\n    }\n  };\n\n  const contextValue = {\n    flags,\n    isEnabled,\n    setFlag,\n    updateFlags,\n    emergencyRollback,\n    userId,\n    segment: userSegment,\n    performanceGate,\n    logFeatureUsage\n  };\n\n  return (\n    <FeatureFlagContext.Provider value={contextValue}>\n      {children}\n      {process.env.NODE_ENV === 'development' && (\n        <FeatureFlagDebugger />\n      )}\n    </FeatureFlagContext.Provider>\n  );\n}\n\n// Development debug component\nfunction FeatureFlagDebugger() {\n  const { flags, isEnabled, segment, userId, performanceGate } = useFeatureFlags();\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (process.env.NODE_ENV !== 'development') return null;\n\n  return (\n    <>\n      {/* Debug Toggle */}\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 rounded-full text-xs font-medium shadow-lg transition-colors\"\n        >\n          üö© Flags\n        </button>\n      </div>\n\n      {/* Debug Panel */}\n      {isOpen && (\n        <div className=\"fixed bottom-16 right-4 w-80 max-h-96 bg-white border border-gray-300 rounded-lg shadow-xl z-50 overflow-hidden\">\n          <div className=\"bg-purple-600 text-white px-4 py-2 text-sm font-medium\">\n            Feature Flags Debug\n          </div>\n          \n          <div className=\"p-3 border-b border-gray-200 text-xs\">\n            <div><strong>User:</strong> {userId || 'anonymous'}</div>\n            <div><strong>Segment:</strong> {segment}</div>\n            <div><strong>Performance Gate:</strong> {performanceGate ? '‚úÖ' : '‚ùå'}</div>\n          </div>\n          \n          <div className=\"max-h-64 overflow-y-auto\">\n            {Object.entries(flags).map(([name, config]) => {\n              const enabled = isEnabled(name);\n              return (\n                <div key={name} className=\"p-2 border-b border-gray-100 text-xs\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className={`font-medium ${\n                      enabled ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {name}\n                    </span>\n                    <span className={`px-2 py-1 rounded text-xs ${\n                      enabled \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-red-100 text-red-800'\n                    }`}>\n                      {enabled ? 'ON' : 'OFF'}\n                    </span>\n                  </div>\n                  <div className=\"text-gray-500 text-xs\">\n                    Rollout: {config.rollout}% | Segments: {config.segments?.join(', ')}\n                  </div>\n                  <div className=\"text-gray-400 text-xs\">\n                    {config.description}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n// Hook for conditional rendering based on feature flags\nexport function useConditionalFeature(flagName, fallback = null) {\n  const { isEnabled, logFeatureUsage } = useFeatureFlags();\n  const enabled = isEnabled(flagName);\n  \n  useEffect(() => {\n    if (enabled) {\n      logFeatureUsage(flagName, 'rendered');\n    }\n  }, [enabled, flagName, logFeatureUsage]);\n  \n  return { enabled, fallback };\n}\n\n// Component wrapper for feature-flagged components\nexport function FeatureGate({ flag, children, fallback = null, onEnabled = null, onDisabled = null }) {\n  const { isEnabled, logFeatureUsage } = useFeatureFlags();\n  const enabled = isEnabled(flag);\n  \n  useEffect(() => {\n    if (enabled) {\n      logFeatureUsage(flag, 'accessed');\n      onEnabled?.();\n    } else {\n      onDisabled?.();\n    }\n  }, [enabled, flag, logFeatureUsage, onEnabled, onDisabled]);\n  \n  return enabled ? children : fallback;\n}\n\n// Performance monitoring for feature flags\nexport function useFeatureFlagMetrics() {\n  const { flags, segment, userId, performanceGate } = useFeatureFlags();\n  const [metrics, setMetrics] = useState({\n    enabledFeatures: 0,\n    totalFeatures: 0,\n    lastUpdate: Date.now()\n  });\n  \n  useEffect(() => {\n    const enabledCount = Object.keys(flags).filter(key => flags[key].enabled).length;\n    const totalCount = Object.keys(flags).length;\n    \n    setMetrics({\n      enabledFeatures: enabledCount,\n      totalFeatures: totalCount,\n      segment,\n      userId,\n      performanceGate,\n      lastUpdate: Date.now()\n    });\n  }, [flags, segment, userId, performanceGate]);\n  \n  return metrics;\n}
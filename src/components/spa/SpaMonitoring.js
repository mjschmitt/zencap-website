// src/components/spa/SpaMonitoring.js - Real-time Performance Monitoring for SPA\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useSpa } from './SpaRouter';\n\nconst MonitoringContext = createContext({\n  metrics: {},\n  alerts: [],\n  recordMetric: () => {},\n  createAlert: () => {},\n  isHealthy: true\n});\n\nexport const useMonitoring = () => useContext(MonitoringContext);\n\n// Performance thresholds for alerts\nconst PERFORMANCE_THRESHOLDS = {\n  // Core Web Vitals\n  lcp: 2500,      // Largest Contentful Paint (ms)\n  fid: 100,       // First Input Delay (ms)\n  cls: 0.1,       // Cumulative Layout Shift\n  \n  // SPA-specific metrics\n  navigationTime: 200,    // SPA navigation time (ms)\n  componentLoadTime: 500, // Component lazy loading (ms)\n  bundleSize: 300,        // Bundle size (KB)\n  memoryUsage: 50,        // Memory usage (MB)\n  \n  // Error rates\n  errorRate: 5,           // Error percentage\n  componentFailureRate: 2 // Component loading failure percentage\n};\n\n// Alert levels\nconst ALERT_LEVELS = {\n  INFO: 'info',\n  WARNING: 'warning',\n  ERROR: 'error',\n  CRITICAL: 'critical'\n};\n\nexport default function SpaMonitoring({ children, enableRealTime = true, reportingInterval = 30000 }) {\n  const { isSpaMode } = useSpa();\n  const [metrics, setMetrics] = useState({\n    coreWebVitals: {},\n    spaMetrics: {},\n    performance: {},\n    errors: [],\n    lastUpdate: Date.now()\n  });\n  const [alerts, setAlerts] = useState([]);\n  const [isHealthy, setIsHealthy] = useState(true);\n  const metricsRef = useRef(metrics);\n  const reportingTimerRef = useRef(null);\n\n  // Update metrics ref for access in callbacks\n  useEffect(() => {\n    metricsRef.current = metrics;\n  }, [metrics]);\n\n  // Core Web Vitals monitoring\n  useEffect(() => {\n    if (typeof window === 'undefined' || !enableRealTime) return;\n\n    let webVitalsModule;\n    \n    const loadWebVitals = async () => {\n      try {\n        webVitalsModule = await import('web-vitals');\n        \n        // Monitor Core Web Vitals\n        webVitalsModule.onCLS((metric) => {\n          recordMetric('coreWebVitals', 'cls', metric.value);\n          if (metric.value > PERFORMANCE_THRESHOLDS.cls) {\n            createAlert('HIGH_CLS', `CLS score ${metric.value} exceeds threshold`, ALERT_LEVELS.WARNING);\n          }\n        });\n        \n        webVitalsModule.onFID((metric) => {\n          recordMetric('coreWebVitals', 'fid', metric.value);\n          if (metric.value > PERFORMANCE_THRESHOLDS.fid) {\n            createAlert('HIGH_FID', `FID ${metric.value}ms exceeds threshold`, ALERT_LEVELS.WARNING);\n          }\n        });\n        \n        webVitalsModule.onLCP((metric) => {\n          recordMetric('coreWebVitals', 'lcp', metric.value);\n          if (metric.value > PERFORMANCE_THRESHOLDS.lcp) {\n            createAlert('HIGH_LCP', `LCP ${metric.value}ms exceeds threshold`, ALERT_LEVELS.ERROR);\n          }\n        });\n        \n      } catch (error) {\n        console.warn('Failed to load web-vitals:', error);\n      }\n    };\n    \n    loadWebVitals();\n  }, [enableRealTime]);\n\n  // Memory usage monitoring\n  useEffect(() => {\n    if (!enableRealTime || typeof window === 'undefined') return;\n    \n    const monitorMemory = () => {\n      if (performance.memory) {\n        const memoryUsage = performance.memory.usedJSHeapSize / (1024 * 1024); // MB\n        recordMetric('performance', 'memoryUsage', memoryUsage);\n        \n        if (memoryUsage > PERFORMANCE_THRESHOLDS.memoryUsage) {\n          createAlert('HIGH_MEMORY', `Memory usage ${memoryUsage.toFixed(1)}MB exceeds threshold`, ALERT_LEVELS.WARNING);\n        }\n      }\n    };\n    \n    const interval = setInterval(monitorMemory, 5000);\n    return () => clearInterval(interval);\n  }, [enableRealTime]);\n\n  // SPA navigation monitoring\n  useEffect(() => {\n    if (!isSpaMode || !enableRealTime) return;\n    \n    const startTime = performance.now();\n    \n    const handleRouteChange = () => {\n      const navigationTime = performance.now() - startTime;\n      recordMetric('spaMetrics', 'navigationTime', navigationTime);\n      \n      if (navigationTime > PERFORMANCE_THRESHOLDS.navigationTime) {\n        createAlert('SLOW_NAVIGATION', `SPA navigation took ${navigationTime.toFixed(0)}ms`, ALERT_LEVELS.WARNING);\n      }\n    };\n    \n    // Listen for route changes\n    window.addEventListener('popstate', handleRouteChange);\n    return () => window.removeEventListener('popstate', handleRouteChange);\n  }, [isSpaMode, enableRealTime]);\n\n  // Periodic reporting\n  useEffect(() => {\n    if (!enableRealTime) return;\n    \n    reportingTimerRef.current = setInterval(() => {\n      sendMetricsReport();\n    }, reportingInterval);\n    \n    return () => {\n      if (reportingTimerRef.current) {\n        clearInterval(reportingTimerRef.current);\n      }\n    };\n  }, [reportingInterval, enableRealTime]);\n\n  // Record metric function\n  const recordMetric = (category, name, value, timestamp = Date.now()) => {\n    setMetrics(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [name]: {\n          value,\n          timestamp,\n          history: [...(prev[category]?.[name]?.history || []).slice(-10), { value, timestamp }]\n        }\n      },\n      lastUpdate: timestamp\n    }));\n  };\n\n  // Create alert function\n  const createAlert = (id, message, level = ALERT_LEVELS.INFO, metadata = {}) => {\n    const alert = {\n      id,\n      message,\n      level,\n      timestamp: Date.now(),\n      metadata,\n      resolved: false\n    };\n    \n    setAlerts(prev => {\n      // Avoid duplicate alerts\n      if (prev.some(a => a.id === id && !a.resolved)) {\n        return prev;\n      }\n      \n      return [...prev.slice(-20), alert]; // Keep last 20 alerts\n    });\n    \n    // Update health status\n    if (level === ALERT_LEVELS.ERROR || level === ALERT_LEVELS.CRITICAL) {\n      setIsHealthy(false);\n    }\n    \n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(`[SPA Monitor] ${level.toUpperCase()}: ${message}`, metadata);\n    }\n    \n    // Send to external monitoring service\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'spa_alert', {\n        alert_id: id,\n        alert_level: level,\n        alert_message: message,\n        spa_mode: isSpaMode\n      });\n    }\n  };\n\n  // Resolve alert\n  const resolveAlert = (alertId) => {\n    setAlerts(prev => \n      prev.map(alert => \n        alert.id === alertId ? { ...alert, resolved: true } : alert\n      )\n    );\n    \n    // Check if we can restore health status\n    const unresolvedCriticalAlerts = alerts.filter(\n      alert => !alert.resolved && (alert.level === ALERT_LEVELS.ERROR || alert.level === ALERT_LEVELS.CRITICAL)\n    );\n    \n    if (unresolvedCriticalAlerts.length === 0) {\n      setIsHealthy(true);\n    }\n  };\n\n  // Send metrics report\n  const sendMetricsReport = async () => {\n    const report = {\n      timestamp: Date.now(),\n      metrics: metricsRef.current,\n      alerts: alerts.filter(alert => !alert.resolved),\n      userAgent: navigator.userAgent,\n      spa_mode: isSpaMode,\n      url: window.location.href\n    };\n    \n    try {\n      // Send to monitoring API (replace with your endpoint)\n      if (process.env.NEXT_PUBLIC_MONITORING_ENDPOINT) {\n        await fetch(process.env.NEXT_PUBLIC_MONITORING_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(report)\n        });\n      }\n      \n      // Log to console in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[SPA Monitor] Metrics report:', report);\n      }\n      \n    } catch (error) {\n      console.error('Failed to send metrics report:', error);\n    }\n  };\n\n  // Performance score calculation\n  const calculatePerformanceScore = () => {\n    const { coreWebVitals } = metrics;\n    let score = 100;\n    \n    // Deduct points for poor Core Web Vitals\n    if (coreWebVitals.lcp?.value > PERFORMANCE_THRESHOLDS.lcp) {\n      score -= 30;\n    }\n    if (coreWebVitals.fid?.value > PERFORMANCE_THRESHOLDS.fid) {\n      score -= 25;\n    }\n    if (coreWebVitals.cls?.value > PERFORMANCE_THRESHOLDS.cls) {\n      score -= 25;\n    }\n    \n    // Deduct points for SPA-specific issues\n    const navTime = metrics.spaMetrics?.navigationTime?.value;\n    if (navTime && navTime > PERFORMANCE_THRESHOLDS.navigationTime) {\n      score -= 20;\n    }\n    \n    return Math.max(0, score);\n  };\n\n  const contextValue = {\n    metrics,\n    alerts: alerts.filter(alert => !alert.resolved),\n    allAlerts: alerts,\n    isHealthy,\n    performanceScore: calculatePerformanceScore(),\n    recordMetric,\n    createAlert,\n    resolveAlert,\n    sendReport: sendMetricsReport,\n    thresholds: PERFORMANCE_THRESHOLDS\n  };\n\n  return (\n    <MonitoringContext.Provider value={contextValue}>\n      {children}\n      {process.env.NODE_ENV === 'development' && (\n        <SpaMonitoringDebugger />\n      )}\n    </MonitoringContext.Provider>\n  );\n}\n\n// Development debug component\nfunction SpaMonitoringDebugger() {\n  const { metrics, alerts, isHealthy, performanceScore } = useMonitoring();\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (process.env.NODE_ENV !== 'development') return null;\n\n  return (\n    <>\n      {/* Monitor Toggle */}\n      <div className=\"fixed bottom-4 left-4 z-50\">\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className={`px-3 py-2 rounded-full text-xs font-medium shadow-lg transition-colors ${\n            isHealthy \n              ? 'bg-green-600 hover:bg-green-700 text-white'\n              : 'bg-red-600 hover:bg-red-700 text-white animate-pulse'\n          }`}\n        >\n          📊 {performanceScore}/100\n        </button>\n      </div>\n\n      {/* Monitor Panel */}\n      {isOpen && (\n        <div className=\"fixed bottom-16 left-4 w-96 max-h-96 bg-white border border-gray-300 rounded-lg shadow-xl z-50 overflow-hidden\">\n          <div className={`px-4 py-2 text-white text-sm font-medium flex items-center justify-between ${\n            isHealthy ? 'bg-green-600' : 'bg-red-600'\n          }`}>\n            <span>SPA Performance Monitor</span>\n            <span className=\"text-xs\">Score: {performanceScore}/100</span>\n          </div>\n          \n          {/* Core Web Vitals */}\n          <div className=\"p-3 border-b border-gray-200\">\n            <div className=\"text-sm font-medium mb-2\">Core Web Vitals</div>\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\n              <div className=\"text-center\">\n                <div className=\"font-medium\">LCP</div>\n                <div className={`text-sm ${\n                  (metrics.coreWebVitals?.lcp?.value || 0) > PERFORMANCE_THRESHOLDS.lcp \n                    ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {metrics.coreWebVitals?.lcp?.value?.toFixed(0) || '--'}ms\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-medium\">FID</div>\n                <div className={`text-sm ${\n                  (metrics.coreWebVitals?.fid?.value || 0) > PERFORMANCE_THRESHOLDS.fid \n                    ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {metrics.coreWebVitals?.fid?.value?.toFixed(0) || '--'}ms\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-medium\">CLS</div>\n                <div className={`text-sm ${\n                  (metrics.coreWebVitals?.cls?.value || 0) > PERFORMANCE_THRESHOLDS.cls \n                    ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {metrics.coreWebVitals?.cls?.value?.toFixed(3) || '--'}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* SPA Metrics */}\n          <div className=\"p-3 border-b border-gray-200\">\n            <div className=\"text-sm font-medium mb-2\">SPA Metrics</div>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span>Navigation:</span>\n                <span className={`${\n                  (metrics.spaMetrics?.navigationTime?.value || 0) > PERFORMANCE_THRESHOLDS.navigationTime \n                    ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {metrics.spaMetrics?.navigationTime?.value?.toFixed(0) || '--'}ms\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Memory:</span>\n                <span className={`${\n                  (metrics.performance?.memoryUsage?.value || 0) > PERFORMANCE_THRESHOLDS.memoryUsage \n                    ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {metrics.performance?.memoryUsage?.value?.toFixed(1) || '--'}MB\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Alerts */}\n          {alerts.length > 0 && (\n            <div className=\"p-3\">\n              <div className=\"text-sm font-medium mb-2\">Recent Alerts</div>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {alerts.slice(-3).map((alert, index) => (\n                  <div key={index} className=\"text-xs p-2 bg-gray-50 rounded\">\n                    <div className={`font-medium ${\n                      alert.level === 'error' ? 'text-red-600' : \n                      alert.level === 'warning' ? 'text-yellow-600' : 'text-blue-600'\n                    }`}>\n                      {alert.level.toUpperCase()}: {alert.id}\n                    </div>\n                    <div className=\"text-gray-600\">{alert.message}</div>\n                    <div className=\"text-gray-400\">\n                      {new Date(alert.timestamp).toLocaleTimeString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\n// Hook for component-specific monitoring\nexport function useComponentMonitoring(componentName) {\n  const { recordMetric, createAlert } = useMonitoring();\n  const startTimeRef = useRef(null);\n  const renderCountRef = useRef(0);\n  \n  const startLoad = () => {\n    startTimeRef.current = performance.now();\n  };\n  \n  const finishLoad = () => {\n    if (startTimeRef.current) {\n      const loadTime = performance.now() - startTimeRef.current;\n      recordMetric('componentLoadTime', componentName, loadTime);\n      \n      if (loadTime > PERFORMANCE_THRESHOLDS.componentLoadTime) {\n        createAlert(\n          `SLOW_COMPONENT_${componentName}`,\n          `${componentName} took ${loadTime.toFixed(0)}ms to load`,\n          ALERT_LEVELS.WARNING\n        );\n      }\n      \n      startTimeRef.current = null;\n    }\n  };\n  \n  const recordRender = () => {\n    renderCountRef.current += 1;\n    recordMetric('componentRenders', componentName, renderCountRef.current);\n  };\n  \n  const recordError = (error) => {\n    createAlert(\n      `COMPONENT_ERROR_${componentName}`,\n      `Error in ${componentName}: ${error.message}`,\n      ALERT_LEVELS.ERROR,\n      { stack: error.stack }\n    );\n  };\n  \n  return {\n    startLoad,\n    finishLoad,\n    recordRender,\n    recordError,\n    renderCount: renderCountRef.current\n  };\n}